use SPAM;
use FOO.Bar;
use Spam = FOO.Bar;

let GREETINGS = (
	"Hello",
    "Hola",
	"Bonjour"
	"Ciao"
	"こんにちは"
	"안녕하세요"
	"Cześć",
	"Olá",
	"Здравствуйте",
	"Chào bạn",
	"您好",
	"Hallo",
	"Hej",
	"Ahoj",
	"سلام" )

$Greetings FOREACH (_ PRINTLN)

for n in seq {}
for ever {
	$Welcome_msg print
}

fn euler_1 {
	(1..1000) filter (n => $n%3==0 or $n%5==0) sum
}

fn eurler_2 {
	fn fibonacci = $n match {
		1 => 1,
		2 => 2,
		_ => ($n-1) fibonacci + ($n-2) fibonacci
	}
	$range nat map (_ fibonacci) filter (_ is_even and _ < 4000000) sum
}

fn euler_3 {
	600851475143 math.factorize (_ 1) max
}

fn euler_4 {
	(1..20) math.lcm
}

fn euler_6 {
	(1..100) map (_^2) sum - ((1..100) sum) ^ 2
}

fn euler_7 {
	use math.PRIMES
	$math.PRIMES 10001
}

fn eurler_8 {
	$bigass_n as $string triade (13,13) map (_ product) max
}

fn euler_9 {

}


let fizzbuzz = ($n % 3, $n % 5) match {
	(0, 0) => "fizzbuzz"
	(0, _) => "fizz"
	(_, 0) => "buzz"
	(_, _) => $n as $String }

1..100 foreach (_ fizzbuzz stdout.print)

$users sort
       map (_ cart)
	   filter (_ total_price)
	   map (_ with_discount < $MAXIMUM_PRICE);

($F ++ $G);

$Functions map reduce 'foldr filter _ total_price

let is_sorted = $list slide (2,1) map (_ <= _) reduce 'and;

let FACTORIAL [N, J>0] = (1 .. N) reduce '*;
let BOGOSORT [LIST] =
	if $list is_sorted do $list else $list shuffle

let FACTORIAL [N]

flatten = flatr '++

for X in LIST
    3 times do {

}

let fizzbuzz [N%15 == 0] = FIZZ + BUZZ
let fizzbuzz [N%3 == 0] = FIZZ
let fizzbuzz [N%5 == 0] = BUZZ
let fizzbuzz [N] = N to $STRING

if $condition all then {
	printf [this_obj]
} else {
	$abc
}

if (CONDITION) then ... else ...
if X%2 == 0 then while X>3 do i++

while CONDITION do ...
until CONDITION do ...
do ... while CONDITION
do ... until CONDITION
for e in $sequence, i from $x + 2 by 3 yield

for ELEMENT in SEQUENCE
for N from X by J
for N min_of SEQUENCE
for N max_of SEQUENCE

for N from_X by I $STOP;
for N from_X to Y $STOP;

import YUCK.EEK as AHEM

import FMT.BLAH.DUH.EUREKA as YIKES
import FMT.AMEN as BINGO
import FMT.JEEZ.OUCH

import from YUCK if (_ starts_with "Lol" or ends_with "qwerty" $CASELESS)

2340 kilometres / 977 newtons

DO PRINT "Hello, world!"

1 + (if FOOBAR then 2 else 3)

def PRINT(A,B,C) = A match {
  B+1 => A
  A is-negative => B
  C-B => 2 }

cond {
  USER can $PARTICIPATE => "313"
  USER can $MANAGE => "wat"
  TRUE => "The user can't do anything." }

class RECTANGLE (X, Y, WIDTH, HEIGHT) {
  let AREA = HEIGHT * WIDTH
  let PERIMETER = 2 * (HEIGHT + WIDTH)
  let CONTAINS (X1,Y1) = X-X1 < (WIDTH/2) and
                         Y-Y1 < (HEIGHT/2)
  let CENTRE = (X+WIDTH/2, Y+HEIGHT/2)
  let TRANSLATE (A,B) = {
    X += A
	Y += B }}

type TREE = NODE || LEAF

type Square [side] {
	let area = side^2 }

type Polygon (let points) {
	let area = points slide [2, 1, mode=cyclic]
					  map (a, b => $a x * $b y - $xy * $x x)
					  sum / 2
	let PERIMETER = $points slide (2,1) map (A,B => A distance B) sum
	let INTERNAL_ANGLES = (POINTS length - 2) * 180
	let INTERSECTION (let POLYGON) = {

	}
}

(1,2,3)
(1:'a', 2:'b', 3:'c')
ABC xyz (1, 'a', abc: $XYZ)

(1,2,3) map (_+1) filter (_ is_odd)

type Direction = north, east, south, west;

type Direction = left | right | up | down;
type Tree = root | inode;

type RIGHT (PARAM: $DEFAULT) extends DIRECTION {
	val X = 1 }

[undef] def do_something
def yuck = "Hello, world!"
[curious]

[1,2,abc:$XYZ]

($ADD, 2, ($ADD, 1, 3)) lisp.ecl.run

(1,2,3) sort [order: _>_, algo: if $sparse then MERGESORT else QUICKSORT];

(1,2,3,4,5,6,7,8,9,10) ENUM.map (_*2, ENUM) ENUM.filter (_%3 == 0) ENUM.reduce (_+_);

('a,('b,1,2),2) as $TREE

let 2D6 = (1..6) zip (1..6) probability_of (_+_ == 2 volume_up)

(1 to 1000 filter (_ is_prime) map (_*2) enumerate @1)
[x for x in list if x != 4]
$list filter (_ == 4)

"Hello, world!" print
JUKEBOX play (SONGS by "John Williams" last volume_up)

(1,2,3) map (_ + rnd.double)

println "Hello, world!"

"Hello, world".print
"Hello, world!" split SPACE map CAPITALIZE + " ...Filippo."
"hello".reverse ++ SEQ
x => x
list filter (_%2 == 0) map (_+2)
false ? (1,0)

set x = 2

let y = 3
set x = y

USERS map _.name

COLOR as $RGB

Context ("api.google.com", "user:pippoc") http.post print

data Tree = $LEAF || ($LNODE && $RNODE)
"x" UPPER
F compose G
assert TRUE
raise INDEX_OUT_OF_BOUNDS
1..100

class TREE (let NODES) {

	def if (CONDITION) then (X) else (Y) = {

	}

	def UNTIL (let CONDITION) {CODE} = while (condition!) (code)

	def travel(distance) = DISTANCE as RGB

$tree parent
$tree pedigree
$tree siblings
$tree children
$tree is_leaf
$tree is_root

# Primitives

"Hello, world!" # string
"x" # char
10
2.75
0xFF
0b11001
0o1374 # numbers
0x24FA5
(1,2,3) # list
(1: 'x', 2: 'y', 3: 'z') # hashmaps
true, false # bool

def @ (funct, arg) = funct (arg)

def add_vector (a,b) = Vectorize ("float32", "float32") {2+2}

arr = (true)

if $condition do {...} else {...}

1 u.MiB
1 u.second
42 u.Newton

let pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170
let euler = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251
let golden_ratio = 1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189

class Generative(X) {

	let MAP(F) = GENERATIVE (F compose X)
	let FILTER(P) = GENERATIVE (if P(X) then P else X)
}

val condition = !true
val condition = true! and false!
if not cargo contains box {

}

# range

// Numbers
$n + $m
$n - $m
$n * $m
$n / $m
$n % $m
$n ^ $m
$n < $m
$n > $m
$n >= $m
$n <= $m
$n compare $m
$n sqrt
$n cbrt

# Bool
x and y
x or y
x !
x xor y

# Lists
(1, 2, 3)

expand LIST.[] {RANGE (X,Y) => $list from X to Y}

# Sequences
$list contains $element
$list filter $has_something
$list fold '++
$list [0..4]
$list (-1)
$list [0..4] flip
$list enum
$list flip
$list head
$list [-1]
$list size
$list map
$list tail
$list flat_map
$list flatten
$list range
$list sort
$list shuffle $rnd

# Hash maps
$hash keys
$hash values

enum COLORS = Red | Blue | Green

let status = COLORS red

Math_Symbolic {√2 + 2}
