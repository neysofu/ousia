if (CONDITION) then ... else ...
while (CONDITION) do ...
until (CONDITION) do ...
do ... while (CONDITION)
do ... until (CONDITION)
for (ELEMENT in SEQUENCE, N from X by 3, M maximize)

for N from X by I $STOP
for N from X to Y $STOP

import YUCK.EEK as AHEM
import BLAH.[DUH.EUREKA as YIKES, AMEN as BINGO, JEEZ.OUCH]
import BAH.WOW.DIBS

import BLAH._super*

let FOO,BAR =

print "Hello, world!"
print ABC

1 + (if FOOBAR then 2 else 3)

def PRINT (A,B,C) = A match
	B+1 => A
	A is-negative => B
	C-B => 2

class RECTANGLE (X, Y, WIDTH, HEIGHT) {
	let AREA = HEIGHT * WIDTH
	let PERIMETER = 2 * (HEIGHT + WIDTH)
	let CONTAINS (X1,Y1) = (X-X1) abs < (WIDTH/2) and (Y-Y1) abs < (HEIGHT/2)
	let CENTRE = (X+WIDTH/2, Y+HEIGHT/2)
	let TRANSLATE (A,B) = {
		X += A
		Y += B
	}
}

class SQUARE extends RECTANGLE (let side) {
	let X = SIDE
	let Y = SIDE
	let AREA = SIDE^2
}
class SQUARE (let SIDE) { let AREA = SIDE^2 }

type POLYGON (let POINTS) {
	let AREA = POINTS slide (2,1) cyclic map (A,B => Ax*By-Ay*Bx) sum / 2
	let PERIMETER = POINTS slide (2,1) map (A,B => A distance B) sum
	let INTERNAL_ANGLES = (POINTS length - 2) * 180
	let INTERSECTION (let POLYGON) = {

	}
}

# List
[1,2,3]
# Hash table
[1:'a', 2:'b', 3:'c']
# Application
ABC xyz (1, 'a', abc: $XYZ)

(1,2,3) map (_+1) filter (_ is-odd)

enum DIRECTION = NORTH, EAST, SOUTH, WEST

type DIRECTION = LEFT|RIGHT|UP|DOWN
type TREE = ROOT|INODE

type RIGHT (PARAM: $DEFAULT) extends DIRECTION {
	val X = 1 }

[undef] def do_something
def yuck = "Hello, world!"
[curious]

[1,2,abc:$XYZ]

($ADD, 2, ($ADD, 1, 3)) lisp.ecl.run

[1,2,3] sort (order: _>_, algo: $RADIXSORT)

($BUBBLESORT, $BUCKETSORT, $HEAPSORT, $INSERTIONSORT, $MERGESORT, $QUICKSORT, $RADIXSORT, $SELECTIONSORT, $SHELLSORT, $TIMSORT)

(1,2,3,4,5,6,7,8,9,10) ENUM.map (_*2) ENUM.filter (_%3 == 0) ENUM.reduce (_+_);

('a,('b,1,2),2) as $TREE

let 2D6 = (1..6) zip (1..6) probability_of (_+_ == 2 volume_up)

(1 to 1000 filter (_ is_prime) map (_*2) enumerate @1)
[x for x in list if x != 4]
LIST filter (_ == 4)

"Hello, world!" print
JUKEBOX play (SONGS by "John Williams" last volume_up)

(1,2,3) map (_ + rnd.double)

println "Hello, world!"

"Hello, world".print
"Hello, world!" split SPACE map CAPITALIZE + " ...Filippo."
"hello".reverse ++ SEQ
x => x
list filter (_%2 == 0) map (_+2)
false ? (1,0)

set x = 2

let y = 3
set x = y

USERS map _.name

COLOR as $RGB

Context ("api.google.com", "user:pippoc") http.post print

data Tree = $LEAF || ($LNODE && $RNODE)
"x" UPPER
F compose G
assert TRUE
raise INDEX_OUT_OF_BOUNDS
1..100

class TREE (let NODES) {

	def if (CONDITION) then (X) else (Y) = {

	}

	def UNTIL (let CONDITION) {CODE} = while (condition!) (code)

	def travel(distance) = DISTANCE as RGB

# Primitives

"Hello, world!" # string
"x" # char
10
2.75
0xFF
0b11001
0o1234567 # numbers
(1,2,3) # list
(1: 'x', 2: 'y', 3: 'z') # hashmaps
true, false # bool

def @ (funct, arg) = funct (arg)

def add_vector (a,b) = Vectorize("float32", "float32") {2+2}

arr = (true)

# Yoda yoda operator

if (condition) {...} else {...}

1 units.MiB
1 units.second
42 units.Newton


pi = π = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170
euler = e = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251
golden = φ = 1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189

class GENERATIVE(X) {

	let MAP(F) = GENERATIVE (F compose X)
	let FILTER(P) = GENERATIVE (if P(X) then P else X)
}

val condition = !true
val condition = true! and false!
if not cargo contains box {

}

# range

# Numbers
n + m
n - m
n * m
n / m
n % m
n ^ m
n < m
n > m
n >= m
n <= m
n compare m

# Bool
x and y
x or y
x !
x xor y

# Lists
(1, 2, 3)

expand LIST.[] {RANGE (X,Y) => LIST from X to Y}

# Sequences
LIST contains
LIST filter
LIST fold
LIST [0]
LIST [-1]
LIST [0..4] reverse
LIST enumerate
LIST head
LIST lst
LIST size
LIST map
LIST tail
LIST range
LIST reverse
LIST sort
LIST shuffle

# Hash maps
hash keys
hash values

enum COLORS = $RED, $BLUE, $GREEN

val STATUS = COLORS red

Math_Symbolic {√2 + 2}

# valid symbols:
+
++
-
.
:
,
;
*
^
?
'
=
==
/
//
&
%
$
!
\
|
||
@
°
<
>
>>
<<
