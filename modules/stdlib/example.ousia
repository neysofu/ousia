# Parentheses
# ===========

# List
(1,2,3)
# Hash table
(1:'a', 2:'b', 3:'c')
# Application
(1, 'a', abc: $XYZ)

automaton f compose g

# Statements
# ==========

42 as_roman_numeral

import
import yuck.eek as ahem
import blah.[duh.eureka as yikes, amen as bingo, jeez.ouch]
import nah.wow.dibs

class Woah
class Uhoh {}
class Right (
    param_1,
    param_2,
    param_3,
    param_4: $DEFAULT,
) extends Uhoh {

}
println ("Hello, world!" bold red, end: '')
[undef] def do_something
def yuck = "Hello, world!"
[curious]
val
var
if
while
until
do
for

import yuck.eek as ahem
import blah.(duh.eureka as yikes, amen as bingo, jeez.ouch)
/circular import nah.wow.dibs

println "Wubba lubba dub dub"

($ADD, 2, ($ADD, 1, 3)) lisp.run

(1,2,3) sort (order: _>_, algo: $RADIXSORT)
($BUBBLESORT, $BUCKETSORT, $HEAPSORT, $INSERTIONSORT, $MERGESORT, $QUICKSORT, $RADIXSORT, $SELECTIONSORT, $SHELLSORT, $TIMSORT)

((1,2,3) filter (_ > 1) map (_ * 2) enumerate @1) [symbolic]
((1,2,3) filter (is_prime) map (_ * 2) enumerate @1) [symbolic]

# Function calls are executed by message passing with infix syntax.
# Functions with one arguments may use the @ right-associative operator to
# avoid excessive parentheses nesting.

println ("Hello, world!")
jukebox play (songs by "John Williams" last)
jukebox.play(Songs.played_by("John Williams") @1)

(1,2,3) map (_ + random_Double)

println "Hello, world!"

"Hello, world" system.out.println
"Hello, world!" split " " map (capitalize) + " ...Filippo."
"hello" reverse ++ (seq)
x => x
list filter (_%2 == 0) map (_+2)
false ? (1,0)

private var x = 2

val y = 3
var x = y
users map (x => x.name)

color.to_rgb()

colour as $RGB

println [http.post [Context ["api.google.com", "user:pippoc"]]]
data Tree = $LEAF || ($LNODE && $RNODE)
'x' upper
f compose g
assert true
raise IndexOutOfBounds
1 .. 100

class Tree (nodes) {

  def while (condition) (code) = {

  }

  def until (condition) (code) = while (condition!) (code)

  def travel(distance) = distance as (metre kilo)

# Primitives

"Hello, world!" # string
'x' # char
10
-2.75
0xFF
0b11001
0o1234567 # numbers
(1, 2, 3) # list
(1: 'x', 2: 'y', 3: 'z') # hashmaps
true, false # bool

def @ (funct, arg) = funct (arg)

def add_vector (a,b) = Vectorize("float32", "float32") {2+2}

arr = (true)

# Yoda yoda operator

if (condition) {...} else {...}

1 units.MiB
1 units.second
42 units.Newton


pi = π = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170
euler = e = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251
golden = φ = 1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189

class Generative (x) {

  def map (f) = Generative (f compose x)
  def filter (p) = Generative (() => x if p(x) else x)
}

val condition = !true
val condition = true! and false!
if not cargo contains box {

}

# range

likely if (condition) then {
  do_something()
} else {
  do_something_else()
}

condition ? ("Success", "Failure")

# Numbers
n + m
n - m
n * m
n / m
n % m
n ^ m
n < m
n > m
n >= m
n <= m
n compare m

# Bool
x and y
x or y
x !
x xor y

# Strings
string + other_string

# Lists
(1, 2, 3)

# Control flow
if (condition) then {foo} else {bar}
for foo in bar {jeez}
while (condition) do {foobar}
until (condition) do {foobar}
do {foobar} n times
do {foobar} while (condition)
do {foobar} until (condition)

# Sequences
list contains
list filter
list fold
list fst
list enumerate
list head
list lst
list size
list map
list tail
list range
list reverse
list sort
list shuffle

# Hash maps
hash keys
hash values

enum Colours = Red | blue | green

val status = Colours.red

9 sqrt + 2 # 5
