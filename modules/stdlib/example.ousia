# Function calls are executed by message passing with infix syntax.
# Functions with one arguments may use the @ right-associative operator to
# avoid excessive parentheses nesting.

"hello" head, tail, first, last

native.address @ native.pointer @ "Hello, world!" fixed_length

println @ "Hello, world!"
condition ? ("Success", "Failure")
'x' upper
(1,2,3) map (x => x+1) shuffle
(3,1,2) sort
f compose g
(1,2,3) contains 4
4 in (1,2,3)
assert true
raise IndexOutOfBounds
1 .. 100

// Primitives

"Hello, world!" // string
'x' // char
10
-2.75
0xFF
0b11001
0o1234567 // numbers
(1, 2, 3) // list
(1: 'x', 2: 'y', 3: 'z') // hashmaps
true, false // bool

function @ (funct, arg) = funct (arg)

function addVector (a,b) = Vectorize("float32", "float32") {2+2}

arr = (true)

# Yoda yoda operator

if (condition) {...} else {...}

1 * units.MiB

pi = π = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170
euler = e = 2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251
golden = φ = 1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374847540880753868917521

class Generative (x) {

  def map (f) = Generative (f compose x)
  def filter (p) = Generative (() => x if p(x) else x)
}

// range

likely if (condition) then {
  do_something()
} else {
  do_something_else()
}

condition ? ("Success", "Failure")

val a,b = b,a

1+2i
3 + 4
4 - 3
4 * 3
4 / 3
4 % 3
4 ^ 3

0 < 1
1 > 0
1 >= 0
0 <= 1
0 compare 1

true && false
true || false
true not
true xor false

"Hello, world!"
"Hello, " + "world!"
"Hello," + "world!"
"Happy birthday to ${person}!"

// Lists
(1, 2, 3)

list [0]
list reverse
list range
list contains element

(1: 'A', 2: 'B')
hash keys
hash values
hash contains key
hash map (x => x get 1)

enum Colours = Red | blue | green

val status = Colours.red

while (condition) do {System.println "hello"}

do {
  system.println "hello"
} while (condition)

√ 9 // 3
